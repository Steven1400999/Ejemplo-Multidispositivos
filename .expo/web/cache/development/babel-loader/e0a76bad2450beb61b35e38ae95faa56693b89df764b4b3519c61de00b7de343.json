{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport invariant from 'invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar AnimatedCond = function (_AnimatedNode) {\n  _inherits(AnimatedCond, _AnimatedNode);\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n    _classCallCheck(this, AnimatedCond);\n    invariant(condition instanceof AnimatedNode, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \" + condition);\n    invariant(ifBlock instanceof AnimatedNode, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \" + ifBlock);\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \" + elseBlock);\n    _this = _callSuper(this, AnimatedCond, [{\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]]);\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n  _createClass(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (val(this._condition)) {\n        return val(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n  return AnimatedCond;\n}(AnimatedNode);\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","_AnimatedNode","_inherits","condition","ifBlock","elseBlock","_this","_classCallCheck","undefined","_callSuper","type","cond","_condition","_ifBlock","_elseBlock","_createClass","key","value","toString","__nodeID","__onEvaluate","createAnimatedCond"],"sources":["C:/Users/Stefano/Ejemplo-Multidispositivos/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"sourcesContent":["import invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAASC,KAAK;AACd,SAASC,GAAG;AACZ,OAAOC,YAAY;AAAuB,IAEpCC,YAAY,aAAAC,aAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,aAAA;EAKhB,SAAAD,aAAYG,SAAS,EAAEC,OAAO,EAAEC,SAAS,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,YAAA;IACzCJ,SAAS,CACPO,SAAS,YAAYJ,YAAY,4FACuDI,SAC1F,CAAC;IACDP,SAAS,CACPQ,OAAO,YAAYL,YAAY,6FAC0DK,OAC3F,CAAC;IACDR,SAAS,CACPS,SAAS,YAAYN,YAAY,IAAIM,SAAS,KAAKG,SAAS,mHACmDH,SACjH,CAAC;IACDC,KAAA,GAAAG,UAAA,OAAAT,YAAA,GACE;MACEU,IAAI,EAAE,MAAM;MACZC,IAAI,EAAER,SAAS;MACfC,OAAO,EAAPA,OAAO;MACPC,SAAS,EAATA;IACF,CAAC,EACD,CAACF,SAAS,EAAEC,OAAO,EAAEC,SAAS,CAAC;IAEjCC,KAAA,CAAKM,UAAU,GAAGT,SAAS;IAC3BG,KAAA,CAAKO,QAAQ,GAAGT,OAAO;IACvBE,KAAA,CAAKQ,UAAU,GAAGT,SAAS;IAAC,OAAAC,KAAA;EAC9B;EAACS,YAAA,CAAAf,YAAA;IAAAgB,GAAA;IAAAC,KAAA,EAED,SAAAC,SAAA,EAAW;MACT,8BAA4B,IAAI,CAACC,QAAQ;IAC3C;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAG,aAAA,EAAe;MACb,IAAItB,GAAG,CAAC,IAAI,CAACc,UAAU,CAAC,EAAE;QACxB,OAAOd,GAAG,CAAC,IAAI,CAACe,QAAQ,CAAC;MAC3B,CAAC,MAAM;QACL,OAAO,IAAI,CAACC,UAAU,KAAKN,SAAS,GAAGV,GAAG,CAAC,IAAI,CAACgB,UAAU,CAAC,GAAGN,SAAS;MACzE;IACF;EAAC;EAAA,OAAAR,YAAA;AAAA,EA1CwBD,YAAY;AA6CvC,OAAO,SAASsB,kBAAkBA,CAACV,IAAI,EAAEP,OAAO,EAAEC,SAAS,EAAE;EAC3D,OAAO,IAAIL,YAAY,CACrBH,KAAK,CAACc,IAAI,CAAC,EACXd,KAAK,CAACO,OAAO,CAAC,EACdC,SAAS,KAAKG,SAAS,GAAGA,SAAS,GAAGX,KAAK,CAACQ,SAAS,CACvD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}